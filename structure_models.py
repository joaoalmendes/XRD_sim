### Models with atoms positions

# Tri-Hexagonal modulation; single-Q vector modulation of type (1/2,1/2,q_z)
model_1 = {
    "Cs": [(0, 0, 0.750748), 
           (0, 0, 0.249252), 
           (0.25, 0.25, 0.25), 
           (0.75, 0.75, 0.75)],
    "V": [
        (0.3785912, 0.126306, 0),
        (0.6214088, 0.873694, 0),
        (0.6214088, 0.126306, 0),
        (0.3785912, 0.873694, 0),
        (0.24752, 0, 0),
        (0.75248, 0, 0),
        (0, 0.7474110, 0),
        (0, 0.252589, 0),
    ],
    "Sb": [
        (0, 0.332945, 0.6215610),
        (0, 0.667055, 0.378439),
        (0, 0.332945, 0.378439),
        (0, 0.667055, 0.6215610),
        (0.250563, 0.083484, 0.121629),
        (0.749437, 0.916516, 0.878371),
        (0.250563, 0.916516, 0.878371),
        (0.749437, 0.083484, 0.121629), 
        (0.749437, 0.916516, 0.121629),
        (0.250563, 0.083484, 0.878371),
        (0.749437, 0.083484, 0.878371), 
        (0.250563, 0.916516, 0.121629),
        (0, 0, 0.5),
        (0.25, 0.25, 0),
        (0.75, 0.25, 0),
        (0, 0, 0),
    ],
}

# Star-of-David; single-Q vector modulation of type (1/2,1/2,q_z)
model_2 = {
    "Cs": [(0, 0, 0.749239), 
           (0, 0, 0.250761),
           (0.25, 0.25, 0.25),
           (0.75, 0.75, 0.75),
           ],
    "V": [
        (0.3715413, 0.123737, 0),
        (0.6284587, 0.876263, 0),
        (0.6284587, 0.123737, 0),
        (0.3715413, 0.876263, 0),
        (0.25252, 0, 0),
        (0.74748, 0, 0),
        (0, 0.7525912, 0),
        (0, 0.2474088, 0),
    ],
    "Sb": [
        (0, 0.333695, 0.6225110),
        (0, 0.666305, 0.377489),
        (0, 0.333695, 0.377489),
        (0, 0.666305, 0.6225110),
        (0.249444, 0.083175, 0.122479), 
        (0.750556, 0.916825, 0.877521), 
        (0.750556, 0.916825, 0.122479),
        (0.249444, 0.083175, 0.877521), 
        (0.750556, 0.083175, 0.877521),
        (0.249444, 0.916825, 0.122479),
        (0.249444, 0.916825, 0.877521),
        (0.750556, 0.083175, 0.122479), 
        (0, 0, 0.5),
        (0.25, 0.25, 0),
        (0.75, 0.25, 0),
        (0, 0, 0),
    ],
}

# Stripe-like modulation; single-Q vector modulation of type (1/2,0,q_z)
model_3 = {
    "Cs": [
        (0, 0, 0)
    ],
    "V": [
        (0.25, 0, 0),
        (0.75, 0, 0),
        (0.25, 0, 0.5),
        (0.75, 0, 0.5),
        (0.25, 0.5, 0),
        (0.75, 0.5, 0),
        (0.25, 0.5, 0.5),
        (0.75, 0.5, 0.5),
    ],
    "Sb": [
        (0, 0.25, 0),
        (0.5, 0.25, 0),
        (0.25, 0.125, 0),
        (0.75, 0.125, 0),
        (0.25, 0.375, 0),
        (0.75, 0.375, 0),
        (0.25, 0.125, 0.5),
        (0.75, 0.125, 0.5),
        (0.25, 0.375, 0.5),
        (0.75, 0.375, 0.5),
        (0, 0.25, 0.5),
        (0.5, 0.25, 0.5),
    ],
}

models = [model_1, model_2, model_3]
model_names = ['Tri-H', 'SoD', 'Stripe']
# Given the model return the formula as a string to use as input with ASE.Atoms functions
def get_formula(model):
    formula = ""
    for atom_type in model.keys():
        N_atoms = len(model[atom_type])
        formula += str(atom_type) + str(N_atoms)
    return  formula
